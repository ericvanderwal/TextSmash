@using TextSmasher.Core.Commands
@using TextSmasher.Core
@using TextSmasher.Routing
@using System.ComponentModel.DataAnnotations
@using System.Windows.Input
@using TextSmasher.Models.Forms
@using System.ComponentModel
@inject IJSRuntime JSRuntime


<MudSelect Label="Select Conversion" @bind-Value="conversionType">
    @foreach (ConversionType item in Enum.GetValues(typeof(ConversionType)))
    {
        <MudSelectItem Value="@item">@item</MudSelectItem>    }
</MudSelect>


<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>

    <MudGrid>

        <MudItem xs="12" sm="12" md="12">
            <MudText Typo="Typo.body1">@instructionsText</MudText>
        </MudItem>
        <MudItem xs="12" sm="12" md="6">
            <MudTextField T="string" Label="Input" Variant="Variant.Outlined" @bind-Value="model.InputValue" For="@(() => model.InputValue)" Lines="6"/>
        </MudItem>
        <MudItem xs="12" sm="12" md="6">
            <MudTextField T="string" Label="Output" Variant="Variant.Filled" @bind-Value="model.OutputValue" For="@(() => model.OutputValue)"Lines="6"/>
        </MudItem>
        <MudItem xs="12" sm="12" md="12">
        </MudItem>

    </MudGrid>

    <MudCardActions>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Run</MudButton>
    </MudCardActions>
</EditForm>


@code
{

    SimpleTextModel model = new SimpleTextModel();
    string instructionsText;

    private ConversionType conversionType
    {
        get => _conversionType;
        set
        {
            _conversionType = value;
            UpdateInstructions();
        }
    }

    bool error;
    bool success;
    ISimpleText simpleTextExecute;
    private ConversionType _conversionType;


    // user has clicked submit. Convert text
    private void OnValidSubmit(EditContext context)
    {
        success = true;
        ConvertText();
    }

    // component is initialized. First fetch the default conversion type
    // and get the instructions to display
    protected override void OnInitialized()
    {
        UpdateInstructions();
        base.OnInitialized();
    }

    // update instructions
    private void UpdateInstructions()
    {
        JSRuntime.InvokeVoidAsync("console.log", conversionType.ToString());
        simpleTextExecute = SimpleTextRoute.Parse(conversionType);
        instructionsText = simpleTextExecute.Instructions();
        StateHasChanged();
    }

    // convert txt and display
    private void ConvertText()
    {
        string outTetxt = simpleTextExecute.Run(model.InputValue, out error);
        model.OutputValue = outTetxt;
        JSRuntime.InvokeVoidAsync("console.log", outTetxt + "Error is: " + error);
    }

}